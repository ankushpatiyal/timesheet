c
@split_token==nil
c
@split_token==nil
c
redirect_to root_path
"https://www.facebook.com/logout.php?next=#{root_url}&access_token=#{@split_token}&session_key=#{@split_token}"
@split_token
c
 "https://www.facebook.com/logout.php?next=#{root_url}&access_token=#{@split_token}&session_key=#{@split_token}"
@split_token
c
@split_token==nil
c
@split_token==nil
@split_token
c
@split_token.blank?
@split_tken.blank?
@split_token
c
@split_token.blank?
@split_token.present?
c
@split_token.blank?
@split_token.present?
c
exit
exi
@split_token.
@split_token.present?
@split_token
c
@split_token
c
warden.authenticate!(auth_options)
warden.authenticate!(auth_options[:scope])
warden.authenticate!
warden.authenticate
warden.authenticate!(auth_options[:recall])
warden.authenticate(auth_options[:recall])
auth_options[:recall]
auth_options
auth
authenticate!
authenticate
warden.authenticate
warden
warden["@config"]
warden[:@config]
warden.@config
.@config
warden
warden.default_strategies[:user]
warden.default_strategies
warden[:default_strategies]
warden[:user]
warden.save
warden
exit
n
warden
warden.authenticate
auth_options
after_sign_in_path_for(resource)
yield resource if block_given?
set_flash_message(:notice, :signed_in)
warden.authenticate!(auth_options)
auth_options
self.resource
SessionsController.resource
self.resource
c
session["devise.facebookid"]
c
session["devise.facebookid"]
request.env["omniauth.auth"]["credentials"]["token"]
c
request.env["omniauth.auth"]["credentials"]["token"]
c
request.env["omniauth.auth"]["credentials"]["token"]
c
session["devise.facebookid"]
@split_token
c
session["devise.facebookid"]
c
request.env["omniauth.auth"]["credentials"]["token"]
request.env["omniauth.auth"]["credentials"]
request.env["omniauth.auth"]["credentials"]["tokens"]
request.env["omniauth.auth"]
request.env["omniauth.auth"]["credentials"]["tokens"]
c
session["devise.facebookid"]
exit
c
 respond_to_on_destroy
yield
yiels
sing_out
c
exit
request.env["omniauth.auth"]
sign_out
sign_out(resource_name)
Devise.sign_out_all_scopes
session[:user_id]
 params
c
n
where(provider: auth.provider, uid: auth.uid)
exit
User.from_omniauth(request.env["omniauth.auth"])
request.env["omniauth.auth"]
n
auth.uid
uid
auth.provider
env["omniauth.auth"]
req.env["omniauth.auth"]
request.env["omniauth.auth"]
c
exit
n
nn
n
nn
n
nn
n
nn
n
exit
n
c
request.env["omniauth.auth"]
c
exit
<%=gmaps4rails(@hash) %>
<%= gmaps4rails(@hash) %>
<%= gmaps4rails(@json) %>
Gmaps4rails.build_markers(@users)
Gmaps4rails
c
Gmaps4rails.build_markers
 Gmaps4rails.build_markers(@users)
c
exit
parms
params
exit
params
exit
params
exit
params[:id].first
params[:id]
params
exit
@home= Home.where(:id=>params[:id]).first
params
exit
@home.nearbys
c
<%=image_tag("https://maps.googleapis.com/maps/api/staticmap?center=#{@home.first.add1}&zoom=14&size=300x300&markers=#{@home.add1}&sensor=false")%>
@home.first.add1
c
exit
@home.first.add1
@home.add2
@home.add1
@home.name
@home
exit
Home.where(:id=>params[:id])
Home.where(:id=>id)
Home.where(:id=>"1")
params[:id]
params
c
exit
c
exit
params
exit
current_user.id
current_user.present?
s.price
s.name
c
exit
c
s.errors.any?
c
s.errors.any?
c
s.errors.any?
s
c
s
c
s.errors
c
s.errors
@homes
c
s.errors
s.errors.present?
c
s.errors.blank?
c
s.errors.blank?
c
s.errors.blank?
s.errors.any?
s.errors.any
c
@homes.size
@homes.length
c
exit
@homes.length
@homes.size
@homes.size?
@homes
c
exit
c
exit
s.errors[:base]
s.errors
c
exit
@homes.errors.any?
@homes
c
s.errors.add :base, "dfdf"
s.errors.any?
c
s.errors.any?
s
c
s.errors.add :base, "Row #{@i+2}: #{message}"
c
params
c
@homes.map(&:valid?).all?
@homes.first.index
@homes
exit
@good("8").errors.any?
@good.each(&:save!)
@good.each(&:save)
@good.each(&:save!)
@good
@good=@homes.each(&:valid?)
